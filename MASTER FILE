import time
import board
import adafruit_vl53l1x
import RPi.GPIO as GPIO
import smbus
import math
from picamera2 import Picamera2
from PIL import Image
import datetime
import atexit
from flask import Flask, send_from_directory
import os
import requests as req

# GPIO setup
GPIO.setmode(GPIO.BCM)

# Servo pins
SERVO1_PIN = 6
SERVO2_PIN = 17
SERVO_Y_PIN = 13  # Servo for Y-axis (Gyro control)

# Setup servos
GPIO.setup(SERVO1_PIN, GPIO.OUT)
GPIO.setup(SERVO2_PIN, GPIO.OUT)
GPIO.setup(SERVO_Y_PIN, GPIO.OUT)

# 50Hz frequency
pwm1 = GPIO.PWM(SERVO1_PIN, 50)
pwm2 = GPIO.PWM(SERVO2_PIN, 50)
servo_y = GPIO.PWM(SERVO_Y_PIN, 50)

# Start at neutral position
pwm1.start(7.5)
pwm2.start(7.5)
servo_y.start(7.5)

# Distance Sensor Setup
i2c = board.I2C()
vl53 = adafruit_vl53l1x.VL53L1X(i2c)
vl53.distance_mode = 1
vl53.timing_budget = 100
vl53.start_ranging()

# Gyroscope setup
power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c
bus = smbus.SMBus(1)
address = 0x68  # I2C address of MPU6050
bus.write_byte_data(address, power_mgmt_1, 0)  # Wake up MPU6050

def read_word_2c(reg):
    val = (bus.read_byte_data(address, reg) << 8) + bus.read_byte_data(address, reg + 1)
    return val - 65536 if val >= 0x8000 else val

def dist(a, b):
    return math.sqrt((a * a) + (b * b))

def get_y_rotation(x, y, z):
    return -math.degrees(math.atan2(x, dist(y, z)))

def map_angle_to_duty_cycle(angle):
    return 7.5 + (angle / 90) * 5

# Camera setup
picam2 = Picamera2()
picam2.start()
atexit.register(picam2.stop)
interval = 5

# Flask app setup
directory_to_serve = "/home/pi/Desktop"  # Replace with the folder you want to serve
app = Flask(__name__)

if not os.path.exists(directory_to_serve):
    raise FileNotFoundError(f"The directory {directory_to_serve} does not exist!")

@app.route('/')
def list_files():
    try:
        files = os.listdir(directory_to_serve)
        file_links = "<br>".join([f'<a href="/{file}">{file}</a>' for file in files])
        return f"Files in Desktop:<br>{file_links}"
    except Exception as e:
        return f"Error: {str(e)}"

@app.route('/<path:filename>')
def send_file(filename):
    try:
        return send_from_directory(directory_to_serve, filename)
    except FileNotFoundError:
        return f"File '{filename}' not found", 404

if __name__ == '__main__':
    app.run(host='192.168.1.160', port=5000)

try:
    count = 0
    while True:
        # Read distance sensor
        if vl53.data_ready:
            distance = vl53.distance
            print(f"Distance: {distance} cm")
            vl53.clear_interrupt()
            time.sleep(1.0)

            if distance > 5:
                print("Moving forward...")
                pwm1.ChangeDutyCycle(6)
                pwm2.ChangeDutyCycle(9)
            else:
                print("Obstacle detected! Turning...")
                pwm1.ChangeDutyCycle(0)
                pwm2.ChangeDutyCycle(0)
                time.sleep(1)
                pwm1.ChangeDutyCycle(9)
                pwm2.ChangeDutyCycle(6)
                time.sleep(1)

        # Read gyroscope
        accel_x = read_word_2c(0x3b) / 16384.0
        accel_y = read_word_2c(0x3d) / 16384.0
        accel_z = read_word_2c(0x3f) / 16384.0
        y_rotation = get_y_rotation(accel_x, accel_y, accel_z)
        duty_cycle_y = map_angle_to_duty_cycle(y_rotation)
        servo_y.ChangeDutyCycle(duty_cycle_y)
        print(f"Y Rotation: {y_rotation:.2f}Â°")

        # Capture image
        count += 1
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"test_{timestamp}_{count}.jpg"
        picam2.capture_file(filename)
        print(f"Captured {filename}")

        time.sleep(interval)

        # Request file from Flask server
        resp = req.get('http://192.168.1.160:5000/')
        with open('myfile', 'wb') as fd:
            fd.write(resp.content)
            print("Downloaded file from server")

except KeyboardInterrupt:
    print("\nStopping program...")
    pwm1.stop()
    pwm2.stop()
    servo_y.stop()
    GPIO.cleanup()
