import smbus
import math
import os
from time import sleep
import RPi.GPIO as GPIO  # For controlling servos sg90s?


# Register
power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c


# Servo GPIO pins
SERVO_PAN_PIN = 18   # GPIO pin for pan servo (left-right)
SERVO_TILT_PIN = 19  # GPIO pin for tilt servo (up-down)


# MPU6050 Functions
def read_byte(reg):
    return bus.read_byte_data(address, reg)


def read_word(reg):
    h = bus.read_byte_data(address, reg)
    l = bus.read_byte_data(address, reg + 1)
    value = (h << 8) + l
    return value


def read_word_2c(reg):
    val = read_word(reg)
    if val >= 0x8000:  # If the value is negative
        return -((65535 - val) + 1)
    else:
        return val


def dist(a, b):
    return math.sqrt((a * a) + (b * b))


def get_y_rotation(x, y, z):
    radians = math.atan2(x, dist(y, z))
    return -math.degrees(radians)


def get_x_rotation(x, y, z):
    radians = math.atan2(y, dist(x, z))
    return math.degrees(radians)


# Map angle to servo duty cycle
def map_angle_to_duty(angle):
    min_duty = 2.5  # Duty cycle for -90 degrees
    max_duty = 12.5  # Duty cycle for +90 degrees
    return min_duty + (angle + 90) * (max_duty - min_duty) / 180


# Setup I2C communication
bus = smbus.SMBus(1)
address = 0x68  # MPU6050 I2C address
bus.write_byte_data(address, power_mgmt_1, 0)  # Wake up MPU6050


# Setup GPIO for servos
GPIO.setmode(GPIO.BCM)
GPIO.setup(SERVO_PAN_PIN, GPIO.OUT)
GPIO.setup(SERVO_TILT_PIN, GPIO.OUT)


# Initialize PWM for servos
pwm_pan = GPIO.PWM(SERVO_PAN_PIN, 50)  # 50Hz for pan servo
pwm_tilt = GPIO.PWM(SERVO_TILT_PIN, 50)  # 50Hz for tilt servo
pwm_pan.start(7.5)  # Neutral position
pwm_tilt.start(7.5)  # Neutral position


# Main loop
try:
    while True:
        # Read gyroscope and accelerometer data
        gyroscope_x = read_word_2c(0x43)
        gyroscope_y = read_word_2c(0x45)
        gyroscope_z = read_word_2c(0x47)


        acceleration_x = read_word_2c(0x3b)
        acceleration_y = read_word_2c(0x3d)
        acceleration_z = read_word_2c(0x3f)


        # Scale accelerometer data
        acceleration_x_scaled = acceleration_x / 16384.0
        acceleration_y_scaled = acceleration_y / 16384.0
        acceleration_z_scaled = acceleration_z / 16384.0


        # Calculate rotation angles
        x_rotation = get_x_rotation(acceleration_x_scaled, acceleration_y_scaled, acceleration_z_scaled)
        y_rotation = get_y_rotation(acceleration_x_scaled, acceleration_y_scaled, acceleration_z_scaled)


        # Map rotation angles to servo duty cycles
        pan_duty = map_angle_to_duty(y_rotation)
        tilt_duty = map_angle_to_duty(x_rotation)


        # Set servo positions
        pwm_pan.ChangeDutyCycle(pan_duty)
        pwm_tilt.ChangeDutyCycle(tilt_duty)


        # Debug information
        print("Gyroscope")
        print("--------")
        print("X Rotation: ", x_rotation)
        print("Y Rotation: ", y_rotation)
        print("Pan Duty Cycle: ", pan_duty)
        print("Tilt Duty Cycle: ", tilt_duty)


        # Clear the terminal and delay
        os.system('cls' if os.name == 'nt' else 'clear')
        sleep(0.1)


except KeyboardInterrupt:
    print("Exiting program...")
    pwm_pan.stop()
    pwm_tilt.stop()
    GPIO.cleanup()
