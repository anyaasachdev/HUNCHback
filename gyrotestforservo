#!/usr/bin/python
import smbus
import math
import os
from time import sleep
import RPi.GPIO as GPIO  # For controlling servos

# Register
power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c

# Servo GPIO pins
SERVO_PAN_PIN = 18   # GPIO pin for pan servo (left-right)
SERVO_TILT_PIN = 19  # GPIO pin for tilt servo (up-down)

# MPU6050 Functions
def read_byte(reg):
    return bus.read_byte_data(address, reg)

def read_word(reg):
    h = bus.read_byte_data(address, reg)
    l = bus.read_byte_data(address, reg + 1)
    value = (h << 8) + l
    return value

def read_word_2c(reg):
    val = read_word(reg)
    if val >= 0x8000:  # If the value is negative
        return -((65535 - val) + 1)
    else:
        return val

# Map angle to servo duty cycle
def map_angle_to_duty(angle):
    # Convert angle (-90 to +90 degrees) to duty cycle (2.5% to 12.5%)
    min_duty = 2.5  # Duty cycle for -90 degrees
    max_duty = 12.5  # Duty cycle for +90 degrees
    return min_duty + (angle + 90) * (max_duty - min_duty) / 180

# Setup I2C communication
bus = smbus.SMBus(1)
address = 0x68  # MPU6050 I2C address
bus.write_byte_data(address, power_mgmt_1, 0)  # Wake up MPU6050

# Setup GPIO for servos
GPIO.setmode(GPIO.BCM)
GPIO.setup(SERVO_PAN_PIN, GPIO.OUT)
GPIO.setup(SERVO_TILT_PIN, GPIO.OUT)

# Initialize PWM for servos
pwm_pan = GPIO.PWM(SERVO_PAN_PIN, 50)  # 50Hz for pan servo
pwm_tilt = GPIO.PWM(SERVO_TILT_PIN, 50)  # 50Hz for tilt servo
pwm_pan.start(7.5)  # Neutral position
pwm_tilt.start(7.5)  # Neutral position

# Initial angles (start at neutral position)
x_angle = 0.0
y_angle = 0.0

# Time interval for integration
dt = 0.1  # 100ms loop delay

# Main loop
try:
    while True:
        # Read gyroscope data
        gyro_x = read_word_2c(0x43) / 131.0  # Scale factor for gyroscope
        gyro_y = read_word_2c(0x45) / 131.0
        gyro_z = read_word_2c(0x47) / 131.0

        # Integrate gyroscope data to calculate angles
        x_angle += gyro_x * dt
        y_angle += gyro_y * dt

        # Keep angles within -90 to +90 range
        x_angle = max(min(x_angle, 90), -90)
        y_angle = max(min(y_angle, 90), -90)

        # Map integrated angles to servo duty cycles
        pan_duty = map_angle_to_duty(y_angle)
        tilt_duty = map_angle_to_duty(x_angle)

        # Set servo positions
        pwm_pan.ChangeDutyCycle(pan_duty)
        pwm_tilt.ChangeDutyCycle(tilt_duty)

        # Debug information
        print(f"Gyroscope: X={gyro_x}, Y={gyro_y}, Z={gyro_z}")
        print(f"Integrated Angles: X={x_angle}, Y={y_angle}")
        print(f"Servo Duty Cycles: Pan={pan_duty}, Tilt={tilt_duty}")

        # Wait for the next update
        sleep(dt)

except KeyboardInterrupt:
    print("Exiting program...")
    pwm_pan.stop()
    pwm_tilt.stop()
    GPIO.cleanup()
