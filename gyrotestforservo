import smbus
import math
import RPi.GPIO as GPIO
from time import sleep

# GPIO setup
GPIO.setmode(GPIO.BOARD)

# Servo pins
SERVO_X_PIN = 7  # Servo for X-axis
SERVO_Y_PIN = 11 # Servo for Y-axis

# Setup servos
GPIO.setup(SERVO_X_PIN, GPIO.OUT)
GPIO.setup(SERVO_Y_PIN, GPIO.OUT)

servo_x = GPIO.PWM(SERVO_X_PIN, 50)  # 50Hz frequency
servo_y = GPIO.PWM(SERVO_Y_PIN, 50)

servo_x.start(7.5)  # Start at neutral position
servo_y.start(7.5)

# Gyroscope setup
power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c

bus = smbus.SMBus(1)
address = 0x68  # I2C address of MPU6050
bus.write_byte_data(address, power_mgmt_1, 0)  # Wake up MPU6050

# Helper functions
def read_word_2c(reg):
    val = (bus.read_byte_data(address, reg) << 8) + bus.read_byte_data(address, reg + 1)
    if val >= 0x8000:
        return -((65535 - val) + 1)
    else:
        return val

def dist(a, b):
    return math.sqrt((a * a) + (b * b))

def get_x_rotation(x, y, z):
    radians = math.atan2(y, dist(x, z))
    return math.degrees(radians)

def get_y_rotation(x, y, z):
    radians = math.atan2(x, dist(y, z))
    return -math.degrees(radians)

def map_angle_to_duty_cycle(angle):
    # Map -90째 to +90째 to 2.5% to 12.5%
    return 7.5 + (angle / 90) * 5

# Main loop
try:
    while True:
        # Read accelerometer data
        accel_x = read_word_2c(0x3b)
        accel_y = read_word_2c(0x3d)
        accel_z = read_word_2c(0x3f)

        accel_x_scaled = accel_x / 16384.0
        accel_y_scaled = accel_y / 16384.0
        accel_z_scaled = accel_z / 16384.0

        # Calculate rotation angles
        x_rotation = get_x_rotation(accel_x_scaled, accel_y_scaled, accel_z_scaled)
        y_rotation = get_y_rotation(accel_x_scaled, accel_y_scaled, accel_z_scaled)

        # Map rotation to servo duty cycles
        duty_cycle_x = map_angle_to_duty_cycle(x_rotation)
        duty_cycle_y = map_angle_to_duty_cycle(y_rotation)

        # Move servos
        servo_x.ChangeDutyCycle(duty_cycle_x)
        servo_y.ChangeDutyCycle(duty_cycle_y)

        # Debug output
        print(f"X Rotation: {x_rotation:.2f}째, Y Rotation: {y_rotation:.2f}째")
        print(f"Servo X Duty: {duty_cycle_x:.2f}%, Servo Y Duty: {duty_cycle_y:.2f}%")

        sleep(0.1)

except KeyboardInterrupt:
    servo_x.stop()
    servo_y.stop()
    GPIO.cleanup()
